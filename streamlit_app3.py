import streamlit as st
import numpy as np
from PIL import Image
import onnxruntime as ort

import google.generativeai as genai
from fpdf import FPDF
import tempfile
import os

from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import inch
from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer, Image as RLImage, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY


# ---- Page Configuration ----
st.set_page_config(page_title="Diabetic Retinopathy Classifier", layout="wide")



# Initialize Gemini API
genai.configure(api_key=st.secrets["GEMINI_API_KEY"])

model = genai.GenerativeModel(model_name="gemini-2.0-flash")


def generate_report_text(predicted_class, confidence, stage_prob,p_name='Krishang',
                         p_age=23,p_gender='Male'):
    prompt = f"""
    You are VNIT MedAssistant! Introduce yourself first. 

    Create a short and personalized diagnostic report for a diabetic retinopathy screening.
    The predicted stage is: {predicted_class}, with a model confidence of {confidence:.2f}%. The results
    of predicted class might be slightly inaccurate hence, base your report on the probabilities that
    were predicted for different stages: {stage_prob}. 

    Your report should be based on personalised details i.e suggestions based on age given by {p_age}, 
    gender given by {p_gender}. Mention the person's name in the report given by {p_name}.

    Explain the implications of this stage to a non-medical person, suggest next medical steps,
    and emphasize the importance of regular eye exams. Make it clear, compassionate, and supportive.

    Start by Mentioning the Title of the report, Then Patient Name, Patient Age, Patient Gender,
    then give your analysis.

    At the end, always mention that you are an AI, AI can make mistakes. Refer the patient to an Opthalmologist. 
    """
    response = model.generate_content(prompt)
    return response.text

def create_pdf(report_text, predicted_class):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, "Diabetic Retinopathy Report", ln=True, align="C")

    pdf.set_font("Arial", "", 12)
    pdf.multi_cell(0, 10, f"\nDiagnosis: {predicted_class}\n")
    pdf.multi_cell(0, 10, report_text)

    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(temp_file.name)
    return temp_file.name


def create_pdf2(report_text, predicted_class, image_path):
    pdf_path = f"report_{predicted_class}.pdf"
    
    doc = SimpleDocTemplate(pdf_path, pagesize=A4,
                            rightMargin=72, leftMargin=72,
                            topMargin=72, bottomMargin=72)
    
    styles = getSampleStyleSheet()
    flowables = []

    # Title
    title = Paragraph("<b>Diabetic Retinopathy Report</b>", styles["Title"])
    flowables.append(title)
    flowables.append(Spacer(1, 12))

    # Report Text (word-wrapped)
    for paragraph in report_text.split("\n\n"):
        p = Paragraph(paragraph.replace("\n", "<br/>"), styles["Normal"])
        flowables.append(p)
        flowables.append(Spacer(1, 12))

    # Add Image (scaled to width)
    flowables.append(Spacer(1, 24))
    img = RLImage(image_path, width=4*inch, height=4*inch)
    flowables.append(img)

    doc.build(flowables)
    return pdf_path

# Watermark callback
def add_watermark(canvas, doc):
    canvas.saveState()
    canvas.setFont('Helvetica-Bold', 36)
    canvas.setFillColorRGB(0.9, 0.9, 0.9, alpha=0.3)
    canvas.drawCentredString(A4[0] / 2, A4[1] / 2, "Generated by AI")
    canvas.restoreState()

def create_pdf3(report_text, predicted_class, image_path):
    pdf_path = f"DR_Report_{predicted_class}.pdf"
    doc = SimpleDocTemplate(pdf_path, pagesize=A4,
                            rightMargin=72, leftMargin=72,
                            topMargin=72, bottomMargin=72)

    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name="SectionHeader", fontSize=14, leading=18, spaceAfter=12, spaceBefore=12, fontName="Helvetica-Bold"))
    styles.add(ParagraphStyle(name="NormalJustified", alignment=TA_JUSTIFY, fontSize=11, leading=16))
    styles.add(ParagraphStyle(name="Footer", alignment=TA_CENTER, fontSize=8, leading=10, textColor='grey'))

    flowables = []

    # Title
    title = Paragraph("ü©∫ <b>Diabetic Retinopathy Report</b>", styles["Title"])
    flowables.append(title)
    flowables.append(Spacer(1, 12))

    # Add image early (centered)
    img = RLImage(image_path, width=4 * inch, height=4 * inch)
    img.hAlign = 'CENTER'
    flowables.append(img)
    flowables.append(Spacer(1, 12))

    # Add report section by section
    for paragraph in report_text.strip().split("\n\n"):
        if paragraph.strip().startswith("**") and "**" in paragraph.strip()[2:]:
            # Section header
            header_text = paragraph.strip().replace("**", "")
            flowables.append(Paragraph(header_text, styles["SectionHeader"]))
        else:
            flowables.append(Paragraph(paragraph.replace("\n", "<br/>"), styles["NormalJustified"]))
        flowables.append(Spacer(1, 8))

    # Add footer
    flowables.append(PageBreak())
    footer = Paragraph("This report is AI-generated and for informational use only. Please consult a medical professional.", styles["Footer"])
    flowables.append(footer)

    # Build with watermark
    doc.build(flowables, onFirstPage=add_watermark, onLaterPages=add_watermark)

    return pdf_path


# ---- Load ONNX model ----
@st.cache_resource
def load_onnx_model():
    session = ort.InferenceSession("mlmodel.onnx")  # Must be in same folder or correct relative path
    input_name = session.get_inputs()[0].name
    input_shape = session.get_inputs()[0].shape
    return session, input_name, input_shape

session, input_name, input_shape = load_onnx_model()

# ---- Class Labels ----
class_labels = ['No DR', 'Mild', 'Moderate', 'Severe', 'Proliferative DR']

# ---- Sidebar ----
st.sidebar.title("üß≠ Navigation")
page = st.sidebar.radio("Go to", ["üì∑ Classify Image", "üìä Model Info", "üìö DR Stages", "üë®‚Äç‚öïÔ∏è About Me"])

# ---- Tab 1: Classify Image ----
if page == "üì∑ Classify Image":
    st.title("ü©∫ Diabetic Retinopathy Classifier")
    st.write("Upload a retina (fundus) image below and let the model predict the DR stage.")

    uploaded_file = st.file_uploader("Upload Fundus Image", type=["jpg", "jpeg", "png"])

    if uploaded_file:
        image = Image.open(uploaded_file).convert("RGB")
        st.image(image, caption="Uploaded Image", use_column_width=True)

        # Preprocess
        target_size = tuple(input_shape[1:3])  # Assumes (None, H, W, C)
        image = image.resize(target_size)
        img_array = np.array(image).astype(np.float32) / 255.0
        img_array = np.expand_dims(img_array, axis=0)

        st.write(f"üîç Input shape for ONNX: {img_array.shape}")
        st.write(f"üß† Model expects shape: {input_shape}")

        # Predict
        try:
            prediction = session.run(None, {input_name: img_array})[0][0]
            predicted_class = class_labels[np.argmax(prediction)]
            confidence = np.max(prediction) * 100

            st.markdown(f"### üß† Prediction: `{predicted_class}`")
            st.markdown(f"### üìà Confidence: `{confidence:.2f}%`")
            st.markdown("#### üîç Full Prediction Probabilities:")
            st.bar_chart({label: float(prob) for label, prob in zip(class_labels, prediction)})
            stage_prob={label: float(prob) for label, prob in zip(class_labels, prediction)}
            if st.button("üìù Generate Custom Report PDF"):
                with st.spinner("Generating report..."):
                    # Save uploaded image temporarily
                    temp_image_path = "temp_uploaded_image.png"
                    image.save(temp_image_path)

                    report_text = generate_report_text(predicted_class, confidence, stage_prob)

                    # Pass the image path to the PDF generator
                    pdf_path = create_pdf3(report_text, predicted_class, temp_image_path)

                    with open(pdf_path, "rb") as f:
                        st.download_button("üì• Download PDF Report", f, file_name="DR_Report.pdf", mime="application/pdf")

                    os.remove(pdf_path)
                    os.remove(temp_image_path)

        except Exception as e:
            st.error(f"‚ùå Model inference failed: {str(e)}")


# ---- Tab 2: Model Info ----
elif page == "üìä Model Info":
    st.title("üìä Model Information")
    st.markdown("""
    - **Model Type**: DenseNet121 (converted to ONNX)
    - **Trained On**: Labeled Indian DR Dataset
    - **Input Size**: 224x224 RGB (normalized float32)
    - **Classes**: No DR, Mild, Moderate, Severe, Proliferative DR
    - **Accuracy Achieved**: ~73%
    - **Inference Engine**: ONNX Runtime (no TensorFlow required!)
    """)

    st.image("https://miro.medium.com/v2/resize:fit:1400/1*ckLNL5fx3JNhgNzKeOnx_w.png", caption="Densenet Architecture")

# ---- Tab 3: DR Stages ----
elif page == "üìö DR Stages":
    st.title("üìö Diabetic Retinopathy Stages")
    stages = {
        "No DR": "No visible damage to the retina.",
        "Mild": "Microaneurysms begin to appear.",
        "Moderate": "Blood vessels in the retina are blocked.",
        "Severe": "Many more blood vessels are blocked, retina is damaged.",
        "Proliferative DR": "New abnormal blood vessels grow; risk of vision loss is high."
    }
    for stage, desc in stages.items():
        st.markdown(f"### {stage}")
        st.write(desc)
        st.progress((list(stages.keys()).index(stage) + 1) / len(stages))

# ---- Tab 4: About Me ----
elif page == "üë®‚Äç‚öïÔ∏è About Me":
    st.title("üë®‚Äçüíª About This Project")
    st.markdown("""
    This app was created by **Krishang Gupta** as part of a machine learning project to automate the classification of Diabetic Retinopathy using deep learning.

    - üî¨ Based on Densenet121, converted to ONNX
    - üß† Inference done using ONNX Runtime (faster + cloud-ready)
    - üßë‚Äçüè´ Goal: Assist medical professionals in early detection of DR

    [üìß Contact](mailto:krishanggupta.kg@gmail.com) | [üåê LinkedIn](https://www.linkedin.com/in/krishang-gupta-0b0041305/)
    """)

    st.image("https://upload.wikimedia.org/wikipedia/commons/0/06/Retinopathy3.jpg", caption="Sample DR Image")
